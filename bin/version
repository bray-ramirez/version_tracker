#!/usr/bin/env ruby
require 'optparse'
require 'version_tracker/bumper'


DEFAULT_COMMIT_MESSAGE = 'Set Version to'

module COMMANDS
  INIT = 'init'
  SET = 'set'
  BUMP = 'bump'
  READ = 'read'
  TAG = 'tag'
end


module PARTS
  MAJOR = 'major'
  MINOR = 'minor'
  PATCH = 'patch'
end


options = {}

option_parser =
  OptionParser.new do |opts|
    opts.banner = <<BANNER
    'Manages Rails Application Version'

USAGE:
  version init        # Initialize VERSION File to 0.0.0
  version read        # Read current VERSION
  version set [value] # Set VERSION to value
  version bump [part] # Bump VERSION based on part. Valid part: major, minor, patch. Default: patch
  version tag         # Tag using current VERSION

OPTIONS:
BANNER

    opts.on('-r', '--release', 'Push to release branch using current version') do
      options[:release] = true
    end


    opts.on('-m MESSAGE', '--message=MESSAGE', 'Push with custom commit message') do |message|
      options[:message] = message
    end


    opts.on('-p', '--push', 'Push to current branch') do
      options[:push] = true
    end


    opts.on('-h', '--help', 'Help') do
      puts opts
      exit
    end

  end

option_parser.parse!


version_tracker = VersionTracker::Bumper.new

if ARGV.first.nil?
  puts option_parser
  exit
end

# TODO: Add Validation
if ARGV.first == COMMANDS::INIT
  version_tracker.generate
  puts version_tracker.version
elsif ARGV.first == COMMANDS::SET
  version_tracker.set ARGV[1]
  puts version_tracker.version
elsif ARGV.first == COMMANDS::READ
  puts version_tracker.version
elsif ARGV.first == COMMANDS::TAG
  system("git tag #{version_tracker.version}")
  system("git push origin #{version_tracker.version}")
elsif ARGV.first == COMMANDS::BUMP
  case ARGV[1]
  when PARTS::MAJOR
    options[:part] = :major
  when PARTS::MINOR
    options[:part] = :minor
  when PARTS::PATCH, nil
    options[:part] = :patch
  else
    puts 'Invalid part'
    puts option_parser
    exit
  end

  version_tracker.bump options
  puts version_tracker.version
end


if !!options[:release]
  message = options[:message] unless options[:message].nil?
  message = [DEFAULT_COMMIT_MESSAGE, version_tracker.version].join(' ') if message.nil?

  branch = ['release', version_tracker.version].join '/'
  exists = system("git rev-parse --verify #{branch}")

  if exists
    system("git checkout #{branch}")
  else
    system("git checkout -b #{branch}")
  end

  system('git add VERSION')
  system("git commit -m '#{message}'")

  system("git push origin #{branch}")

  exit
end



if !!options[:push]
  message = options[:message] unless options[:message].nil?
  message = [DEFAULT_COMMIT_MESSAGE, version_tracker.version].join(' ') if message.nil?

  system('git add VERSION')
  system("git commit -m '#{message}'")

  result = `git rev-parse --aabrev-ref HEAD`
  branch = result.gsub(/\n/, '')

  system("git push origin #{branch}")

  exit
end
